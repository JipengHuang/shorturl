version: 0.2

env:
  variables:
    # Thaaais S3 bucket will be used to store the packaged Lambda deployment bundle.
    # Make sure to provide a valid S3 bucket name (it must exist already).
    # Thaaaa`e AWS CodeBuild IAM role must allow write access to it.
    S3_BUCKET: "helloworld-hjp"
    #PACKAGE: "github.com/aws-samples/lambda-go-samples"
    PACKAGE: "github.com/aws-lambda-hjp"

phases:

  install:
    commands:

      # AWS Codebuild Go images use /go for the $GOPATH so let's copy our 
      # application source code into that directory structure.
      - echo CODEBUILD_SRC_DIR - $CODEBUILD_SRC_DIR
      - echo GOPATH - $GOPATH
      - echo GOROOT - $GOROOT
      - echo 开始部署 `date`
      - mkdir -p "/go/src/$(dirname ${PACKAGE})"
      - ln -s "${CODEBUILD_SRC_DIR}" "/go/src/${PACKAGE}" 
      
      # Print aaall environment variables (handy for AWS CodeBuild logs)
      #- env

      # Install golint
      #- go get -u github.com/aws/aws-lambda-go/lambda
     # - go get -u github.com/aws/aws-sdk-go/aws/session
     # - go get -u github.com/aws/aws-sdk-go/service/lambda
      - go get -u golang.org/x/lint/golint
      - go install golang.org/x/lint/golint
      #- go get -u github.com/golang/lint/golint

  pre_build: 
    commands:

      # Make sure we're in the project directory within our GOPATH
      - cd "/go/src/${PACKAGE}"
      - pwd
      - ls ./

      # Fetch all dependencies
      - go get -t ./...

      # Ensure code passes all lint tests
      - golint -set_exit_status

      # Check the Go code for common problems with 'go vet'
      - go vet .

      # Run all tests included with our application
     # - go test .

  build:
    commands:

      # Build our go application
      - go build  -o main main.go
      - ls ./
      - pwd

      # Package our application with AWS SAM
      - aws cloudformation package --template-file template.yml --s3-bucket ${S3_BUCKET} --output-template-file packaged.yml
      - cat packaged.yml
      - aws cloudformation deploy --template-file packaged.yml --stack-name hjp-go --capabilities CAPABILITY_NAMED_IAM
      - echo -e "部署完成于 \n `date`"

artifacts:
  files:
    - packaged.yml
